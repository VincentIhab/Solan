{"mappings":"ACAA,SAAS,gBAAgB,CAAC,mBAAoB,eA+FtC,EA9FJ,IAAM,EAAmB,SAAS,cAAc,CAAC,qBAC3C,EAAiB,SAAS,cAAc,CAAC,mBACzC,EAAiB,SAAS,cAAc,CAAC,mBACzC,EAAkB,SAAS,cAAc,CAAC,oBAC1C,EAAS,SAAS,cAAc,CAAC,UAGnC,EAAc,CAAA,EACd,EAAuB,CAAA,EAGrB,EAAgB,IAAI,qBAAqB,AAAC,IAC5C,EAAQ,OAAO,CAAC,AAAA,IACR,EAAM,cAAc,GACpB,EAAgB,GAAG,CAAG,qBACtB,EAAc,SAAS,CAAC,EAAM,MAAM,EAE5C,EACJ,EAAG,CAAE,UAAW,EAAI,GAEpB,EAAc,OAAO,CAAC,GAEtB,IAAM,EAAe,KACb,OAAO,OAAO,CAlBE,IAmBhB,EAAO,SAAS,CAAC,GAAG,CAAC,YAErB,EAAO,SAAS,CAAC,MAAM,CAAC,WAEhC,CAEA,CAAA,EAAgB,YAAY,CAAG,KAC7B,EAAc,CAAA,EACd,EAAiB,SAAS,CAAC,GAAG,CAAC,UAC/B,EAAe,KAAK,CAAC,OAAO,CAAG,QAC/B,EAAe,KAAK,CAAC,OAAO,CAAG,OAC/B,EAAuB,CAAA,EACvB,GACJ,EAEA,EAAgB,OAAO,CAAG,KACtB,EAAiB,SAAS,CAAC,GAAG,CAAC,UAC/B,EAAe,KAAK,CAAC,OAAO,CAAG,OAC/B,EAAe,KAAK,CAAC,OAAO,CAAG,QAC/B,EAAuB,CAAA,EACvB,GACJ,EAEA,WAAW,KACF,IACD,EAAiB,SAAS,CAAC,GAAG,CAAC,UAC/B,EAAe,KAAK,CAAC,OAAO,CAAG,OAC/B,EAAe,KAAK,CAAC,OAAO,CAAG,QAC/B,EAAuB,CAAA,EACvB,IAER,EAAG,KAED,IAAM,EAAW,KAAK,QAAQ,GAC9B,EAAS,EAAE,CAAC,UAAW,CACnB,SAAU,IACV,EAAG,EACH,QAAS,EACT,KAAM,YACV,EAAG,SAEH,EAAS,EAAE,CAAC,iBAAkB,CAC1B,SAAU,EACV,EAAG,EACH,QAAS,EACT,KAAM,YACV,EAAG,SAEH,EAAS,EAAE,CAAC,iBAAkB,CAC1B,SAAU,IACV,EAAG,EACH,QAAS,EACT,KAAM,YACV,EAAG,SAEH,EAAS,EAAE,CAAC,mBAAoB,CAC5B,SAAU,IACV,EAAG,EACH,QAAS,EACT,KAAM,YACV,EAAG,SAEH,EAAS,EAAE,CAAC,qBAAsB,CAC9B,SAAU,IACV,EAAG,EACH,QAAS,EACT,KAAM,YACV,EAAG,SAIH,OAAO,gBAAgB,CAAC,SAAU,KAC9B,OAAO,YAAY,CAAC,GACpB,EAAc,WAAW,KACjB,GACA,GAER,EAAG,IACP,GAYA,IAAM,EAAW,IAAI,qBATrB,SAAwB,CAAO,CAAE,CAAQ,EACrC,EAAQ,OAAO,CAAC,AAAC,IACT,EAAM,cAAc,GACpB,EAAM,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,WAC3B,EAAS,SAAS,CAAC,EAAM,MAAM,EAEvC,EACJ,EAE0D,CACtD,UAAW,EACf,GAEA,SAAS,gBAAgB,CAAC,WAAW,OAAO,CAAC,AAAC,IAC1C,EAAS,OAAO,CAAC,EACrB,EACJ","sources":["<anon>","src/js/dom.js"],"sourcesContent":["var $ae0af43c09de0737$exports = {};\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    const spinnerContainer = document.getElementById(\"spinner-container\");\n    const videoContainer = document.getElementById(\"video-container\");\n    const imageContainer = document.getElementById(\"image-container\");\n    const backgroundVideo = document.getElementById(\"background-video\");\n    const navbar = document.getElementById(\"navbar\");\n    const scrollThreshold = 100; // The scroll level to trigger the background change\n    let videoLoaded = false;\n    let initialScrollHandled = false;\n    // Lazy load video\n    const videoObserver = new IntersectionObserver((entries)=>{\n        entries.forEach((entry)=>{\n            if (entry.isIntersecting) {\n                backgroundVideo.src = \"./Images/video.mp4\";\n                videoObserver.unobserve(entry.target);\n            }\n        });\n    }, {\n        threshold: 0.1\n    });\n    videoObserver.observe(backgroundVideo);\n    const handleScroll = ()=>{\n        if (window.scrollY > scrollThreshold) navbar.classList.add(\"scrolled\");\n        else navbar.classList.remove(\"scrolled\");\n    };\n    backgroundVideo.onloadeddata = ()=>{\n        videoLoaded = true;\n        spinnerContainer.classList.add(\"hidden\");\n        videoContainer.style.display = \"block\";\n        imageContainer.style.display = \"none\";\n        initialScrollHandled = true;\n        handleScroll();\n    };\n    backgroundVideo.onerror = ()=>{\n        spinnerContainer.classList.add(\"hidden\");\n        videoContainer.style.display = \"none\";\n        imageContainer.style.display = \"block\";\n        initialScrollHandled = true;\n        handleScroll();\n    };\n    setTimeout(()=>{\n        if (!videoLoaded) {\n            spinnerContainer.classList.add(\"hidden\");\n            videoContainer.style.display = \"none\";\n            imageContainer.style.display = \"block\";\n            initialScrollHandled = true;\n            handleScroll();\n        }\n    }, 10000); // 10 seconds timeout\n    const timeline = gsap.timeline();\n    timeline.to(\".header\", {\n        duration: 2.5,\n        x: 0,\n        opacity: 1,\n        ease: \"power2.out\"\n    }, \"-=0.4\");\n    timeline.to(\".header__spans\", {\n        duration: 1,\n        x: 0,\n        opacity: 1,\n        ease: \"power2.out\"\n    }, \"-=0.4\");\n    timeline.to(\".header__title\", {\n        duration: 1.1,\n        x: 0,\n        opacity: 1,\n        ease: \"power2.out\"\n    }, \"-=0.4\");\n    timeline.to(\".header__buttons\", {\n        duration: 1.1,\n        x: 0,\n        opacity: 1,\n        ease: \"power2.out\"\n    }, \"-=0.4\");\n    timeline.to(\".header__paragraph\", {\n        duration: 1.2,\n        x: 0,\n        opacity: 1,\n        ease: \"power2.out\"\n    }, \"-=0.4\");\n    // Throttle the scroll event listener\n    let isScrolling;\n    window.addEventListener(\"scroll\", ()=>{\n        window.clearTimeout(isScrolling);\n        isScrolling = setTimeout(()=>{\n            if (initialScrollHandled) handleScroll();\n        }, 100);\n    });\n    // Create an IntersectionObserver for animations\n    function animateElement(entries, observer) {\n        entries.forEach((entry)=>{\n            if (entry.isIntersecting) {\n                entry.target.classList.add(\"animate\");\n                observer.unobserve(entry.target); // Stop observing after adding the class\n            }\n        });\n    }\n    const observer = new IntersectionObserver(animateElement, {\n        threshold: 0.1\n    });\n    document.querySelectorAll(\".target\").forEach((e)=>{\n        observer.observe(e);\n    });\n});\n\n\n//# sourceMappingURL=index.1f2b3371.js.map\n","document.addEventListener(\"DOMContentLoaded\", function () {\r\n    const spinnerContainer = document.getElementById('spinner-container');\r\n    const videoContainer = document.getElementById('video-container');\r\n    const imageContainer = document.getElementById('image-container');\r\n    const backgroundVideo = document.getElementById('background-video');\r\n    const navbar = document.getElementById(\"navbar\");\r\n    const scrollThreshold = 100; // The scroll level to trigger the background change\r\n\r\n    let videoLoaded = false;\r\n    let initialScrollHandled = false;\r\n\r\n    // Lazy load video\r\n    const videoObserver = new IntersectionObserver((entries) => {\r\n        entries.forEach(entry => {\r\n            if (entry.isIntersecting) {\r\n                backgroundVideo.src = \"./Images/video.mp4\";\r\n                videoObserver.unobserve(entry.target);\r\n            }\r\n        });\r\n    }, { threshold: 0.1 });\r\n\r\n    videoObserver.observe(backgroundVideo);\r\n\r\n    const handleScroll = () => {\r\n        if (window.scrollY > scrollThreshold) {\r\n            navbar.classList.add(\"scrolled\");\r\n        } else {\r\n            navbar.classList.remove(\"scrolled\");\r\n        }\r\n    };\r\n\r\n    backgroundVideo.onloadeddata = () => {\r\n      videoLoaded = true;\r\n      spinnerContainer.classList.add('hidden');\r\n      videoContainer.style.display = 'block';\r\n      imageContainer.style.display = 'none';\r\n      initialScrollHandled = true;\r\n      handleScroll();\r\n  };\r\n\r\n  backgroundVideo.onerror = () => {\r\n      spinnerContainer.classList.add('hidden');\r\n      videoContainer.style.display = 'none';\r\n      imageContainer.style.display = 'block';\r\n      initialScrollHandled = true;\r\n      handleScroll();\r\n  };\r\n\r\n  setTimeout(() => {\r\n      if (!videoLoaded) {\r\n          spinnerContainer.classList.add('hidden');\r\n          videoContainer.style.display = 'none';\r\n          imageContainer.style.display = 'block';\r\n          initialScrollHandled = true;\r\n          handleScroll();\r\n      }\r\n  }, 10000); // 10 seconds timeout\r\n\r\n    const timeline = gsap.timeline();\r\n    timeline.to(\".header\", {\r\n        duration: 2.5,\r\n        x: 0,\r\n        opacity: 1,\r\n        ease: \"power2.out\",\r\n    }, \"-=0.4\");\r\n\r\n    timeline.to(\".header__spans\", {\r\n        duration: 1,\r\n        x: 0,\r\n        opacity: 1,\r\n        ease: \"power2.out\",\r\n    }, \"-=0.4\");\r\n\r\n    timeline.to(\".header__title\", {\r\n        duration: 1.1,\r\n        x: 0,\r\n        opacity: 1,\r\n        ease: \"power2.out\",\r\n    }, \"-=0.4\");\r\n\r\n    timeline.to(\".header__buttons\", {\r\n        duration: 1.1,\r\n        x: 0,\r\n        opacity: 1,\r\n        ease: \"power2.out\",\r\n    }, \"-=0.4\");\r\n\r\n    timeline.to(\".header__paragraph\", {\r\n        duration: 1.2,\r\n        x: 0,\r\n        opacity: 1,\r\n        ease: \"power2.out\",\r\n    }, \"-=0.4\");\r\n\r\n    // Throttle the scroll event listener\r\n    let isScrolling;\r\n    window.addEventListener(\"scroll\", () => {\r\n        window.clearTimeout(isScrolling);\r\n        isScrolling = setTimeout(() => {\r\n            if (initialScrollHandled) {\r\n                handleScroll();\r\n            }\r\n        }, 100);\r\n    });\r\n\r\n    // Create an IntersectionObserver for animations\r\n    function animateElement(entries, observer) {\r\n        entries.forEach((entry) => {\r\n            if (entry.isIntersecting) {\r\n                entry.target.classList.add(\"animate\");\r\n                observer.unobserve(entry.target); // Stop observing after adding the class\r\n            }\r\n        });\r\n    }\r\n\r\n    const observer = new IntersectionObserver(animateElement, {\r\n        threshold: 0.1, // Adjust as needed\r\n    });\r\n\r\n    document.querySelectorAll(\".target\").forEach((e) => {\r\n        observer.observe(e);\r\n    });\r\n});\r\n"],"names":["document","addEventListener","isScrolling","spinnerContainer","getElementById","videoContainer","imageContainer","backgroundVideo","navbar","videoLoaded","initialScrollHandled","videoObserver","IntersectionObserver","entries","forEach","entry","isIntersecting","src","unobserve","target","threshold","observe","handleScroll","window","scrollY","classList","add","remove","onloadeddata","style","display","onerror","setTimeout","timeline","gsap","to","duration","x","opacity","ease","clearTimeout","observer","querySelectorAll","e"],"version":3,"file":"index.1f2b3371.js.map"}