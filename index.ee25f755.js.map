{"mappings":"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","sources":["<anon>","src/js/workProcess.js"],"sourcesContent":["document.addEventListener(\"DOMContentLoaded\", ()=>{\n    const solutionsItem = document.querySelector(\".Solutions\");\n    const dropdownMenu = solutionsItem.querySelector(\".dropdown-menu\");\n    const overlay = document.getElementById(\"overlay\");\n    const solutionslink = document.querySelector(\".Solutions-link\");\n    const solutionslinkarrow = document.querySelector(\".Solutions-arrow\");\n    const navigation = document.querySelector(\".navigation\");\n    const dropdownItem = document.querySelectorAll(\".dropdown--item\");\n    solutionsItem.addEventListener(\"mouseenter\", ()=>{\n        overlay.style.opacity = \"1\";\n        overlay.style.visibility = \"visible\";\n        solutionslink.style.color = \"#fff\";\n        solutionslinkarrow.style.fill = \"#fff\";\n    // on hold for add a overlay for the navigation\n    // navigation.classList.add('onhoveronsolutions')\n    });\n    solutionsItem.addEventListener(\"mouseleave\", ()=>{\n        overlay.style.opacity = \"0\";\n        overlay.style.visibility = \"hidden\";\n        solutionslink.style.color = \"inherit\";\n        solutionslinkarrow.style.fill = \"#000\";\n    // on hold for add a overlay for the navigation\n    // navigation.classList.remove('onhoveronsolutions')\n    });\n    dropdownItem.forEach((el)=>{\n        el.addEventListener(\"mouseenter\", ()=>{\n            dropdownMenu.classList.add(\"wide-dropdownMenu\");\n        });\n    });\n    dropdownMenu.addEventListener(\"mouseleave\", ()=>{\n        dropdownMenu.classList.remove(\"wide-dropdownMenu\");\n    });\n});\n// workProcess sections \ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    // Initialize ScrollMagic Controller\n    const controller = new ScrollMagic.Controller();\n    // GSAP animation for fading in and scaling up\n    const fadeInAnimation = gsap.fromTo(\"#work-process\", {\n        opacity: 0,\n        y: 50\n    }, {\n        duration: 0.5,\n        scale: 1,\n        opacity: 1,\n        y: 0,\n        ease: \"sine.out\"\n    });\n    // GSAP animation for fading out and moving up\n    const fadeOutAnimation = gsap.to(\"#work-process\", {\n        duration: 0.2,\n        opacity: 0,\n        y: -50,\n        ease: \"sine.out\"\n    });\n    // Create ScrollMagic Scene for fading in\n    new ScrollMagic.Scene({\n        triggerElement: \"#work-process\",\n        triggerHook: 0.11 // Trigger when 25% of the element is visible\n    }).setTween(fadeInAnimation).addTo(controller);\n    // Create ScrollMagic Scene for fading out\n    new ScrollMagic.Scene({\n        triggerElement: \"#work-process\",\n        triggerHook: 0.50,\n        offset: document.querySelector(\"#work-process\").offsetHeight // Offset to ensure the trigger happens at the bottom of the element\n    }).setTween(fadeOutAnimation).addTo(controller);\n    // Intersection Observer for background and text color changes\n    const sections = document.querySelectorAll(\".st1, .st2, .st3, .st4, .work-process__title_con\");\n    const workProcess = document.getElementById(\"work-process\");\n    const workProcessBackground = document.querySelector(\".work-process__background\");\n    const observer = new IntersectionObserver((entries, observer)=>{\n        entries.forEach((entry)=>{\n            if (entry.isIntersecting) {\n                if (entry.target.classList.contains(\"work-process__title_con\")) workProcess.style.backgroundColor = \"#F7F7F7\"; // Use solid color\n                else if (entry.target.classList.contains(\"st1\")) {\n                    workProcess.style.backgroundColor = \"#000\"; // Use solid color\n                    workProcess.style.color = \"#E2E5E4\";\n                } else if (entry.target.classList.contains(\"st2\")) {\n                    workProcess.style.backgroundColor = \"#183D3D\"; // Use solid color\n                    workProcess.style.color = \"#E2E5E4\";\n                    workProcessBackground.style.opacity = \"0\";\n                    workProcessBackground.style.display = \"none\";\n                } else if (entry.target.classList.contains(\"st3\")) {\n                    workProcess.style.backgroundColor = \"#ffffff\"; // Use solid color\n                    workProcess.style.color = \"#000\";\n                } else if (entry.target.classList.contains(\"st4\")) {\n                    workProcess.style.backgroundColor = \"#ffffff\"; // Use solid color\n                    workProcess.style.color = \"#000\";\n                    workProcessBackground.style.display = \"block\";\n                    setTimeout(()=>{\n                        workProcessBackground.style.opacity = \"1\";\n                    }, 100);\n                }\n                entry.target.style.opacity = \"1\";\n            } else // Reset animation when out of view\n            entry.target.style.opacity = \"0\";\n        });\n    }, {\n        root: null,\n        threshold: 0.3 // Adjust the threshold as needed\n    });\n    sections.forEach((section)=>{\n        observer.observe(section);\n    });\n    // Handle line color and height\n    const lines = document.querySelectorAll(\".line\");\n    const handleScroll = ()=>{\n        const windowHeight = window.innerHeight;\n        const lineHeight = 1584; // 70rem in pixels\n        const speedFactor = 0.5; // Adjust this value to slow down the line height growth\n        lines.forEach((line)=>{\n            const rect = line.getBoundingClientRect();\n            const startColor = line.dataset.colorStart;\n            const endColor = line.dataset.colorEnd;\n            if (rect.top <= windowHeight && rect.bottom >= 0) {\n                const visibleHeight = Math.min(windowHeight - rect.top, lineHeight);\n                const adjustedHeight = visibleHeight * speedFactor; // Adjust the visible height by the speed factor\n                const newHeight = adjustedHeight / lineHeight * lineHeight;\n                line.style.height = `${newHeight}px`;\n                const progress = visibleHeight / lineHeight;\n                line.style.backgroundColor = interpolateColor(startColor, endColor, progress);\n            } else {\n                line.style.height = \"0\";\n                line.style.backgroundColor = startColor;\n            }\n        });\n    };\n    const interpolateColor = (color1, color2, factor)=>{\n        const result = color1.slice(1).match(/.{2}/g).map((c, i)=>{\n            const value = Math.round(parseInt(c, 16) * (1 - factor) + parseInt(color2.slice(1).match(/.{2}/g)[i], 16) * factor);\n            return value.toString(16).padStart(2, \"0\");\n        }).join(\"\");\n        return `#${result}`;\n    };\n    window.addEventListener(\"scroll\", handleScroll);\n    window.addEventListener(\"resize\", handleScroll);\n    handleScroll(); // Initial check on page load\n    // Create animations for descriptions\n    function createAnimations(section) {\n        const leftPs = section.querySelectorAll(\".work-process__decription--left\");\n        const rightPs = section.querySelectorAll(\".work-process__decription--right\");\n        if (leftPs.length === 0 || rightPs.length === 0) {\n            console.warn(\"No left or right p elements found in the section.\");\n            return;\n        }\n        leftPs.forEach((leftP, index)=>{\n            const rightP = rightPs[index];\n            if (rightP) {\n                // Animation for left p element\n                const leftPAnimationIn = gsap.fromTo(leftP, {\n                    opacity: 0,\n                    x: -100\n                }, {\n                    opacity: 1,\n                    x: 0,\n                    duration: 0.5\n                });\n                const leftPAnimationOut = gsap.to(leftP, {\n                    opacity: 0,\n                    x: -100,\n                    duration: 0.5\n                });\n                // Animation for right p element\n                const rightPAnimationIn = gsap.fromTo(rightP, {\n                    opacity: 0,\n                    x: 100\n                }, {\n                    opacity: 1,\n                    x: 0,\n                    duration: 0.5\n                });\n                const rightPAnimationOut = gsap.to(rightP, {\n                    opacity: 0,\n                    x: 100,\n                    duration: 0.5\n                });\n                // Create ScrollMagic Scene for left p element\n                new ScrollMagic.Scene({\n                    triggerElement: section,\n                    triggerHook: 0.5,\n                    duration: section.offsetHeight\n                }).setTween(leftPAnimationIn).on(\"enter\", ()=>{\n                    rightPAnimationOut.play();\n                }).on(\"leave\", ()=>{\n                    leftPAnimationOut.play();\n                }).addTo(controller);\n                // Create ScrollMagic Scene for right p element\n                new ScrollMagic.Scene({\n                    triggerElement: section,\n                    triggerHook: 0.5,\n                    duration: section.offsetHeight\n                }).setTween(rightPAnimationIn).on(\"enter\", ()=>{\n                    leftPAnimationOut.play();\n                }).on(\"leave\", ()=>{\n                    rightPAnimationOut.play();\n                }).addTo(controller);\n            }\n        });\n    }\n    // Apply animations to each section\n    const sectionsToAnimate = document.querySelectorAll(\".st1, .st2, .st3, .st4\");\n    sectionsToAnimate.forEach(createAnimations);\n});\n\n//# sourceMappingURL=index.ee25f755.js.map\n","\r\n\r\n\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    const solutionsItem = document.querySelector('.Solutions');\r\n    const dropdownMenu = solutionsItem.querySelector('.dropdown-menu');\r\n    const overlay = document.getElementById('overlay');\r\n    const solutionslink = document.querySelector('.Solutions-link');\r\n    const solutionslinkarrow = document.querySelector('.Solutions-arrow');\r\n    const navigation = document.querySelector('.navigation');\r\n    const dropdownItem = document.querySelectorAll('.dropdown--item')\r\n  \r\n      solutionsItem.addEventListener('mouseenter', () => {\r\n        overlay.style.opacity = '1';\r\n        overlay.style.visibility = 'visible';\r\n        solutionslink.style.color = \"#fff\"\r\n        solutionslinkarrow.style.fill = \"#fff\";\r\n        // on hold for add a overlay for the navigation\r\n        // navigation.classList.add('onhoveronsolutions')\r\n      });\r\n  \r\n      solutionsItem.addEventListener('mouseleave', () => {\r\n        overlay.style.opacity = '0';\r\n        overlay.style.visibility = 'hidden';\r\n        solutionslink.style.color = \"inherit\"\r\n        solutionslinkarrow.style.fill = \"#000\";\r\n  \r\n        // on hold for add a overlay for the navigation\r\n        // navigation.classList.remove('onhoveronsolutions')\r\n      });\r\n  \r\n      dropdownItem.forEach(el => {\r\n        el.addEventListener('mouseenter', () => {\r\n          dropdownMenu.classList.add(\"wide-dropdownMenu\")\r\n        })\r\n      })\r\n  \r\n      dropdownMenu.addEventListener('mouseleave', () => {\r\n        dropdownMenu.classList.remove(\"wide-dropdownMenu\")\r\n      })\r\n      \r\n    });\r\n\r\n// workProcess sections \r\n  document.addEventListener(\"DOMContentLoaded\", function () {\r\n    // Initialize ScrollMagic Controller\r\n    const controller = new ScrollMagic.Controller();\r\n  \r\n    // GSAP animation for fading in and scaling up\r\n    const fadeInAnimation = gsap.fromTo(\"#work-process\", {\r\n      opacity: 0,\r\n      y: 50\r\n    }, {\r\n      duration: 0.5,\r\n      scale: 1,\r\n      opacity: 1,\r\n      y: 0,\r\n      ease: \"sine.out\",\r\n    });\r\n  \r\n    // GSAP animation for fading out and moving up\r\n    const fadeOutAnimation = gsap.to(\"#work-process\", {\r\n      duration: 0.2,\r\n      opacity: 0,\r\n      y: -50,\r\n      ease: \"sine.out\",\r\n    });\r\n  \r\n    // Create ScrollMagic Scene for fading in\r\n    new ScrollMagic.Scene({\r\n      triggerElement: \"#work-process\",\r\n      triggerHook: 0.11 // Trigger when 25% of the element is visible\r\n    })\r\n    .setTween(fadeInAnimation)\r\n    .addTo(controller);\r\n  \r\n    // Create ScrollMagic Scene for fading out\r\n    new ScrollMagic.Scene({\r\n      triggerElement: \"#work-process\",\r\n      triggerHook: 0.50, // Trigger when 75% of the element is visible (bottom trigger)\r\n      offset: document.querySelector(\"#work-process\").offsetHeight // Offset to ensure the trigger happens at the bottom of the element\r\n    })\r\n    .setTween(fadeOutAnimation)\r\n    .addTo(controller);\r\n  \r\n    // Intersection Observer for background and text color changes\r\n    const sections = document.querySelectorAll('.st1, .st2, .st3, .st4, .work-process__title_con');\r\n    const workProcess = document.getElementById('work-process');\r\n    const workProcessBackground = document.querySelector('.work-process__background');\r\n  \r\n    const observer = new IntersectionObserver((entries, observer) => {\r\n      entries.forEach(entry => {\r\n        if (entry.isIntersecting) {\r\n          if (entry.target.classList.contains('work-process__title_con')) {\r\n            workProcess.style.backgroundColor = '#F7F7F7'; // Use solid color\r\n          } else if (entry.target.classList.contains('st1')) {\r\n            workProcess.style.backgroundColor = '#000'; // Use solid color\r\n            workProcess.style.color = '#E2E5E4';\r\n          } else if (entry.target.classList.contains('st2')) {\r\n            workProcess.style.backgroundColor = '#183D3D'; // Use solid color\r\n            workProcess.style.color = '#E2E5E4';\r\n            workProcessBackground.style.opacity = \"0\";\r\n            workProcessBackground.style.display = \"none\";\r\n          } else if (entry.target.classList.contains('st3')) {\r\n            workProcess.style.backgroundColor = '#ffffff'; // Use solid color\r\n            workProcess.style.color = '#000';\r\n          } else if (entry.target.classList.contains('st4')) {\r\n            workProcess.style.backgroundColor = '#ffffff'; // Use solid color\r\n            workProcess.style.color = '#000';\r\n            workProcessBackground.style.display = \"block\";\r\n            setTimeout(() => {\r\n              workProcessBackground.style.opacity = \"1\";\r\n            }, 100);\r\n          }\r\n          entry.target.style.opacity = '1';\r\n        }  else {\r\n          // Reset animation when out of view\r\n          entry.target.style.opacity = '0';\r\n        }\r\n      });\r\n    }, {\r\n      root: null,\r\n      threshold: 0.3 // Adjust the threshold as needed\r\n    });\r\n  \r\n    sections.forEach(section => {\r\n      observer.observe(section);\r\n    });\r\n  // Handle line color and height\r\n  const lines = document.querySelectorAll('.line');\r\n  \r\n  const handleScroll = () => {\r\n    const windowHeight = window.innerHeight;\r\n    const lineHeight = 99 * 16; // 70rem in pixels\r\n    const speedFactor = 0.5; // Adjust this value to slow down the line height growth\r\n  \r\n    lines.forEach(line => {\r\n      const rect = line.getBoundingClientRect();\r\n      const startColor = line.dataset.colorStart;\r\n      const endColor = line.dataset.colorEnd;\r\n  \r\n      if (rect.top <= windowHeight && rect.bottom >= 0) {\r\n        const visibleHeight = Math.min(windowHeight - rect.top, lineHeight);\r\n        const adjustedHeight = visibleHeight * speedFactor; // Adjust the visible height by the speed factor\r\n        const newHeight = (adjustedHeight / lineHeight) * lineHeight;\r\n        line.style.height = `${newHeight}px`;\r\n  \r\n        const progress = visibleHeight / lineHeight;\r\n        line.style.backgroundColor = interpolateColor(startColor, endColor, progress);\r\n      } else {\r\n        line.style.height = '0';\r\n        line.style.backgroundColor = startColor;\r\n      }\r\n    });\r\n  };\r\n  \r\n  const interpolateColor = (color1, color2, factor) => {\r\n    const result = color1.slice(1).match(/.{2}/g)\r\n      .map((c, i) => {\r\n        const value = Math.round(parseInt(c, 16) * (1 - factor) + parseInt(color2.slice(1).match(/.{2}/g)[i], 16) * factor);\r\n        return value.toString(16).padStart(2, '0');\r\n      })\r\n      .join('');\r\n    return `#${result}`;\r\n  };\r\n  \r\n  window.addEventListener('scroll', handleScroll);\r\n  window.addEventListener('resize', handleScroll);\r\n  handleScroll(); // Initial check on page load\r\n  \r\n    // Create animations for descriptions\r\n    function createAnimations(section) {\r\n      const leftPs = section.querySelectorAll('.work-process__decription--left');\r\n      const rightPs = section.querySelectorAll('.work-process__decription--right');\r\n  \r\n      if (leftPs.length === 0 || rightPs.length === 0) {\r\n        console.warn(\"No left or right p elements found in the section.\");\r\n        return;\r\n      }\r\n  \r\n      leftPs.forEach((leftP, index) => {\r\n        const rightP = rightPs[index];\r\n  \r\n        if (rightP) {\r\n          // Animation for left p element\r\n          const leftPAnimationIn = gsap.fromTo(leftP, { opacity: 0, x: -100 }, { opacity: 1, x: 0, duration: 0.5 });\r\n          const leftPAnimationOut = gsap.to(leftP, { opacity: 0, x: -100, duration: 0.5 });\r\n  \r\n          // Animation for right p element\r\n          const rightPAnimationIn = gsap.fromTo(rightP, { opacity: 0, x: 100 }, { opacity: 1, x: 0, duration: 0.5 });\r\n          const rightPAnimationOut = gsap.to(rightP, { opacity: 0, x: 100, duration: 0.5 });\r\n  \r\n          // Create ScrollMagic Scene for left p element\r\n          new ScrollMagic.Scene({\r\n            triggerElement: section,\r\n            triggerHook: 0.5,\r\n            duration: section.offsetHeight\r\n          })\r\n          .setTween(leftPAnimationIn)\r\n          .on('enter', () => {\r\n            rightPAnimationOut.play();\r\n          })\r\n          .on('leave', () => {\r\n            leftPAnimationOut.play();\r\n          })\r\n          .addTo(controller);\r\n  \r\n          // Create ScrollMagic Scene for right p element\r\n          new ScrollMagic.Scene({\r\n            triggerElement: section,\r\n            triggerHook: 0.5,\r\n            duration: section.offsetHeight\r\n          })\r\n          .setTween(rightPAnimationIn)\r\n          .on('enter', () => {\r\n            leftPAnimationOut.play();\r\n          })\r\n          .on('leave', () => {\r\n            rightPAnimationOut.play();\r\n          })\r\n          .addTo(controller);\r\n        }\r\n      });\r\n    }\r\n  \r\n    // Apply animations to each section\r\n    const sectionsToAnimate = document.querySelectorAll('.st1, .st2, .st3, .st4');\r\n    sectionsToAnimate.forEach(createAnimations);\r\n  });\r\n\r\n  "],"names":["document","addEventListener","solutionsItem","querySelector","dropdownMenu","overlay","getElementById","solutionslink","solutionslinkarrow","dropdownItem","querySelectorAll","style","opacity","visibility","color","fill","forEach","el","classList","add","remove","controller","ScrollMagic","Controller","fadeInAnimation","gsap","fromTo","y","duration","scale","ease","fadeOutAnimation","to","Scene","triggerElement","triggerHook","setTween","addTo","offset","offsetHeight","sections","workProcess","workProcessBackground","observer","IntersectionObserver","entries","entry","isIntersecting","target","contains","backgroundColor","display","setTimeout","root","threshold","section","observe","lines","handleScroll","windowHeight","window","innerHeight","line","rect","getBoundingClientRect","startColor","dataset","colorStart","endColor","colorEnd","top","bottom","visibleHeight","Math","min","height","adjustedHeight","interpolateColor","color1","color2","factor","result","slice","match","map","c","i","value","round","parseInt","toString","padStart","join","sectionsToAnimate","leftPs","rightPs","length","console","warn","leftP","index","rightP","leftPAnimationIn","x","leftPAnimationOut","rightPAnimationIn","rightPAnimationOut","on","play"],"version":3,"file":"index.ee25f755.js.map"}