{"mappings":"ACAA,MAAM,EAAW,SAAS,aAAa,CAAC,aAClC,EAAQ,MAAM,IAAI,CAAC,SAAS,gBAAgB,CAAC,mBAC7C,EAAa,SAAS,cAAc,CAAC,QACrC,EAAa,SAAS,cAAc,CAAC,QACrC,EAAU,SAAS,aAAa,CAAC,8BACjC,EAAiB,SAAS,aAAa,CAAC,oBACxC,EAAa,EAAM,MAAM,CAC/B,IAAI,EAAe,EACf,EAAS,EACT,EAAO,EACP,EAAa,CAAA,EAEjB,SAAS,EAAe,CAAS,EAE/B,EAAM,OAAO,CAAC,AAAC,IACb,EAAK,SAAS,CAAC,MAAM,CAAC,SAAU,kBAAmB,iBAAkB,uBAAwB,sBAC/F,GAGI,AAAc,SAAd,GACF,CAAK,CAAC,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,SAAU,mBACjC,CAAK,CAAC,EAAM,MAAM,CAAG,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,yBAC7B,AAAc,SAAd,GACT,CAAK,CAAC,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,SAAU,kBACjC,CAAK,CAAC,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,wBAEvB,CAAK,CAAC,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,UAGzB,AAGF,WACE,IAAM,EAAa,AAAE,CAAA,EAAe,CAAA,EAAK,EAAc,GACvD,CAAA,EAAQ,KAAK,CAAC,KAAK,CAAG,CAAC,EAAE,EAAW,CAAC,CAAC,AACxC,GALA,CAOA,SAAS,IACP,EAAe,AAAC,CAAA,EAAe,CAAA,EAAK,EACpC,IAAM,EAAY,EAAM,KAAK,GAC7B,EAAM,IAAI,CAAC,GAGX,EAAM,OAAO,CAAC,AAAC,IACb,EAAS,WAAW,CAAC,EACvB,GAEA,EAAe,OACjB,CAEA,SAAS,IACP,EAAgB,AAAA,CAAA,EAAe,EAAI,CAAA,EAAc,EACjD,IAAM,EAAW,EAAM,GAAG,GAC1B,EAAM,OAAO,CAAC,GAGd,EAAM,OAAO,CAAC,AAAC,IACb,EAAS,WAAW,CAAC,EACvB,GAEA,EAAe,OACjB,CA6DA,SAAS,IACP,EAAa,CAAA,EACb,IAAM,EAAS,EAAS,EACpB,KAAK,GAAG,CAAC,GAAU,KACjB,EAAS,EACX,IAEA,IAGN,CArEA,EAAW,gBAAgB,CAAC,QAAS,GACrC,EAAW,gBAAgB,CAAC,QAAS,GAGrC,IAGA,EAAS,gBAAgB,CAAC,aAI1B,SAA0B,CAAK,EAC7B,EAAS,EAAM,OAAO,CAAC,EAAE,CAAC,OAAO,AACnC,EAN0D,CAAA,GAC1D,EAAS,gBAAgB,CAAC,YAO1B,SAAyB,CAAK,EAC5B,EAAO,EAAM,OAAO,CAAC,EAAE,CAAC,OAAO,AACjC,EATwD,CAAA,GACxD,EAAS,gBAAgB,CAAC,WAU1B,WACE,IAAM,EAAS,EAAS,EACpB,KAAK,GAAG,CAAC,GAAU,KACjB,EAAS,EACX,IAEA,IAGN,EAnBsD,CAAA,GAsBtD,EAAS,gBAAgB,CAAC,YAK1B,SAAyB,CAAK,EAC5B,EAAa,CAAA,EACb,EAAS,EAAM,OAAO,AACxB,EARwD,CAAA,GACxD,EAAS,gBAAgB,CAAC,YAS1B,SAAyB,CAAK,EACxB,GACF,CAAA,EAAO,EAAM,OAAO,AAAP,CAEjB,EAbwD,CAAA,GACxD,EAAS,gBAAgB,CAAC,UAc1B,WACM,GACF,GAEJ,EAlBoD,CAAA,GACpD,EAAS,gBAAgB,CAAC,aAmB1B,WACM,GACF,GAEJ,EAvB0D,CAAA,GAsC1D,EAAe,gBAAgB,CAAC,QAAS,AAAC,IACtC,EAAE,cAAc,GACb,AAA+B,oBAA/B,EAAe,WAAW,CACzB,EAAe,WAAW,CAAG,oBAE7B,EAAe,WAAW,CAAG,kBAEjC,EAAS,SAAS,CAAC,MAAM,CAAC,WAE9B","sources":["<anon>","src/js/solutions.js"],"sourcesContent":["const carousel = document.querySelector(\".carousel\");\nconst items = Array.from(document.querySelectorAll(\".carousel-item\"));\nconst prevButton = document.getElementById(\"prev\");\nconst nextButton = document.getElementById(\"next\");\nconst tracker = document.querySelector(\".carousel-tracker__tracker\");\nconst withAnimations = document.querySelector(\".with-animations\");\nconst totalItems = items.length;\nlet currentIndex = 0;\nlet startX = 0;\nlet endX = 0;\nlet isDragging = false;\nfunction updateCarousel(direction) {\n    // Remove active and direction classes from all items\n    items.forEach((item)=>{\n        item.classList.remove(\"active\", \"come-from-right\", \"come-from-left\", \"come-from-right-prev\", \"come-from-left-prev\");\n    });\n    // Add active and direction class to the first visible item\n    if (direction === \"next\") {\n        items[0].classList.add(\"active\", \"come-from-right\");\n        items[items.length - 1].classList.add(\"come-from-right-prev\");\n    } else if (direction === \"prev\") {\n        items[0].classList.add(\"active\", \"come-from-left\");\n        items[1].classList.add(\"come-from-left-prev\");\n    } else items[0].classList.add(\"active\");\n    updateTracker();\n}\nfunction updateTracker() {\n    const percentage = (currentIndex + 1) / totalItems * 100; // Calculate the percentage\n    tracker.style.width = `${percentage}%`;\n}\nfunction next() {\n    currentIndex = (currentIndex + 1) % totalItems;\n    const firstItem = items.shift(); // Remove the first item from the array\n    items.push(firstItem); // Add it to the end of the array\n    // Reorder the DOM elements to match the array order\n    items.forEach((item)=>{\n        carousel.appendChild(item);\n    });\n    updateCarousel(\"next\"); // Update the active class with direction\n}\nfunction prev() {\n    currentIndex = (currentIndex - 1 + totalItems) % totalItems;\n    const lastItem = items.pop(); // Remove the last item from the array\n    items.unshift(lastItem); // Add it to the beginning of the array\n    // Reorder the DOM elements to match the array order\n    items.forEach((item)=>{\n        carousel.appendChild(item);\n    });\n    updateCarousel(\"prev\"); // Update the active class with direction\n}\nprevButton.addEventListener(\"click\", prev);\nnextButton.addEventListener(\"click\", next);\n// Initial setup\nupdateCarousel();\n// Touch event handlers\ncarousel.addEventListener(\"touchstart\", handleTouchStart, false);\ncarousel.addEventListener(\"touchmove\", handleTouchMove, false);\ncarousel.addEventListener(\"touchend\", handleTouchEnd, false);\nfunction handleTouchStart(event) {\n    startX = event.touches[0].clientX;\n}\nfunction handleTouchMove(event) {\n    endX = event.touches[0].clientX;\n}\nfunction handleTouchEnd() {\n    const deltaX = startX - endX;\n    if (Math.abs(deltaX) > 50) {\n        if (deltaX > 0) next();\n        else prev();\n    }\n}\n// Mouse event handlers for desktop\ncarousel.addEventListener(\"mousedown\", handleMouseDown, false);\ncarousel.addEventListener(\"mousemove\", handleMouseMove, false);\ncarousel.addEventListener(\"mouseup\", handleMouseUp, false);\ncarousel.addEventListener(\"mouseleave\", handleMouseLeave, false);\nfunction handleMouseDown(event) {\n    isDragging = true;\n    startX = event.clientX;\n}\nfunction handleMouseMove(event) {\n    if (isDragging) endX = event.clientX;\n}\nfunction handleMouseUp() {\n    if (isDragging) handleDragEnd();\n}\nfunction handleMouseLeave() {\n    if (isDragging) handleDragEnd();\n}\nfunction handleDragEnd() {\n    isDragging = false;\n    const deltaX = startX - endX;\n    if (Math.abs(deltaX) > 50) {\n        if (deltaX > 0) next();\n        else prev();\n    }\n}\nwithAnimations.addEventListener(\"click\", (e)=>{\n    e.preventDefault();\n    if (withAnimations.textContent === \"with animations\") withAnimations.textContent = \"without animtions\";\n    else withAnimations.textContent = \"with animations\";\n    carousel.classList.toggle(\"animated\");\n});\n\n//# sourceMappingURL=index.49442a1f.js.map\n","const carousel = document.querySelector('.carousel');\r\nconst items = Array.from(document.querySelectorAll('.carousel-item'));\r\nconst prevButton = document.getElementById('prev');\r\nconst nextButton = document.getElementById('next');\r\nconst tracker = document.querySelector('.carousel-tracker__tracker');\r\nconst withAnimations = document.querySelector('.with-animations');\r\nconst totalItems = items.length;\r\nlet currentIndex = 0;\r\nlet startX = 0;\r\nlet endX = 0;\r\nlet isDragging = false;\r\n\r\nfunction updateCarousel(direction) {\r\n  // Remove active and direction classes from all items\r\n  items.forEach((item) => {\r\n    item.classList.remove('active', 'come-from-right', 'come-from-left', 'come-from-right-prev', 'come-from-left-prev');\r\n  });\r\n\r\n  // Add active and direction class to the first visible item\r\n  if (direction === 'next') {\r\n    items[0].classList.add('active', 'come-from-right');\r\n    items[items.length - 1].classList.add('come-from-right-prev');\r\n  } else if (direction === 'prev') {\r\n    items[0].classList.add('active', 'come-from-left');\r\n    items[1].classList.add('come-from-left-prev');\r\n  } else {\r\n    items[0].classList.add('active');\r\n  }\r\n\r\n  updateTracker();\r\n}\r\n\r\nfunction updateTracker() {\r\n  const percentage = ((currentIndex + 1) / totalItems) * 100; // Calculate the percentage\r\n  tracker.style.width = `${percentage}%`;\r\n}\r\n\r\nfunction next() {\r\n  currentIndex = (currentIndex + 1) % totalItems;\r\n  const firstItem = items.shift(); // Remove the first item from the array\r\n  items.push(firstItem); // Add it to the end of the array\r\n\r\n  // Reorder the DOM elements to match the array order\r\n  items.forEach((item) => {\r\n    carousel.appendChild(item);\r\n  });\r\n\r\n  updateCarousel('next'); // Update the active class with direction\r\n}\r\n\r\nfunction prev() {\r\n  currentIndex = (currentIndex - 1 + totalItems) % totalItems;\r\n  const lastItem = items.pop(); // Remove the last item from the array\r\n  items.unshift(lastItem); // Add it to the beginning of the array\r\n\r\n  // Reorder the DOM elements to match the array order\r\n  items.forEach((item) => {\r\n    carousel.appendChild(item);\r\n  });\r\n\r\n  updateCarousel('prev'); // Update the active class with direction\r\n}\r\n\r\nprevButton.addEventListener('click', prev);\r\nnextButton.addEventListener('click', next);\r\n\r\n// Initial setup\r\nupdateCarousel();\r\n\r\n// Touch event handlers\r\ncarousel.addEventListener('touchstart', handleTouchStart, false);\r\ncarousel.addEventListener('touchmove', handleTouchMove, false);\r\ncarousel.addEventListener('touchend', handleTouchEnd, false);\r\n\r\nfunction handleTouchStart(event) {\r\n  startX = event.touches[0].clientX;\r\n}\r\n\r\nfunction handleTouchMove(event) {\r\n  endX = event.touches[0].clientX;\r\n}\r\n\r\nfunction handleTouchEnd() {\r\n  const deltaX = startX - endX;\r\n  if (Math.abs(deltaX) > 50) { // Sensitivity threshold\r\n    if (deltaX > 0) {\r\n      next();\r\n    } else {\r\n      prev();\r\n    }\r\n  }\r\n}\r\n\r\n// Mouse event handlers for desktop\r\ncarousel.addEventListener('mousedown', handleMouseDown, false);\r\ncarousel.addEventListener('mousemove', handleMouseMove, false);\r\ncarousel.addEventListener('mouseup', handleMouseUp, false);\r\ncarousel.addEventListener('mouseleave', handleMouseLeave, false);\r\n\r\nfunction handleMouseDown(event) {\r\n  isDragging = true;\r\n  startX = event.clientX;\r\n}\r\n\r\nfunction handleMouseMove(event) {\r\n  if (isDragging) {\r\n    endX = event.clientX;\r\n  }\r\n}\r\n\r\nfunction handleMouseUp() {\r\n  if (isDragging) {\r\n    handleDragEnd();\r\n  }\r\n}\r\n\r\nfunction handleMouseLeave() {\r\n  if (isDragging) {\r\n    handleDragEnd();\r\n  }\r\n}\r\n\r\nfunction handleDragEnd() {\r\n  isDragging = false;\r\n  const deltaX = startX - endX;\r\n  if (Math.abs(deltaX) > 50) { // Sensitivity threshold\r\n    if (deltaX > 0) {\r\n      next();\r\n    } else {\r\n      prev();\r\n    }\r\n  }\r\n}\r\n\r\n\r\nwithAnimations.addEventListener('click', (e) => {\r\n    e.preventDefault()\r\n    if(withAnimations.textContent === 'with animations') {\r\n        withAnimations.textContent = 'without animtions'\r\n    }else {\r\n        withAnimations.textContent = 'with animations'\r\n    }\r\n    carousel.classList.toggle('animated')\r\n\r\n})"],"names":["carousel","document","querySelector","items","Array","from","querySelectorAll","prevButton","getElementById","nextButton","tracker","withAnimations","totalItems","length","currentIndex","startX","endX","isDragging","updateCarousel","direction","forEach","item","classList","remove","add","updateTracker","percentage","style","width","next","firstItem","shift","push","appendChild","prev","lastItem","pop","unshift","handleDragEnd","deltaX","Math","abs","addEventListener","event","touches","clientX","e","preventDefault","textContent","toggle"],"version":3,"file":"index.49442a1f.js.map"}