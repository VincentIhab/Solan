{"mappings":"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","sources":["<anon>","src/js/dom.js"],"sourcesContent":["var $ae0af43c09de0737$exports = {};\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    const spinnerContainer = document.getElementById(\"spinner-container\");\n    const videoContainer = document.getElementById(\"video-container\");\n    const imageContainer = document.getElementById(\"image-container\");\n    const backgroundVideo = document.getElementById(\"background-video\");\n    const navigationButton = document.querySelector(\".navigation__button\");\n    const navbar = document.getElementById(\"navbar\");\n    const newParent = document.getElementById(\"header_container\");\n    const oldParent = document.getElementById(\"header\");\n    const scrollThreshold = 100; // The scroll level to trigger the background change\n    let videoLoaded = false;\n    let currentVideo = \"\";\n    const mobileVideoSrc = \"mobile-Land-video.webm\";\n    const desktopVideoSrc = \"video.mp4\";\n    // Function to load and play the video with retries\n    const loadAndPlayVideo = (videoElement, retries = 3, delay = 2000)=>{\n        const tryPlay = (attemptsLeft)=>{\n            videoElement.load();\n            videoElement.play().then(()=>{\n                videoLoadSuccess();\n            }).catch((e)=>{\n                console.error(\"Autoplay prevented:\", e);\n                if (attemptsLeft > 1) {\n                    console.log(`Retrying to play video. Attempts left: ${attemptsLeft - 1}`);\n                    setTimeout(()=>tryPlay(attemptsLeft - 1), delay);\n                } else videoLoadError(e);\n            });\n        };\n        tryPlay(retries);\n    };\n    // Video load success function\n    const videoLoadSuccess = ()=>{\n        videoLoaded = true;\n        spinnerContainer.classList.add(\"hidden\");\n        videoContainer.style.display = \"block\";\n        imageContainer.style.display = \"none\";\n    };\n    // Video load error function\n    const videoLoadError = (e)=>{\n        console.error(\"Video failed to load\", e);\n        spinnerContainer.classList.add(\"hidden\");\n        videoContainer.style.display = \"none\";\n        imageContainer.style.display = \"block\";\n    };\n    // Select and load the appropriate video based on screen size\n    const selectVideo = ()=>{\n        const videoElement = backgroundVideo;\n        if (window.innerWidth <= 767 && currentVideo !== \"mobile\") {\n            console.log(\"Selecting mobile video\");\n            videoElement.src = mobileVideoSrc;\n            videoElement.type = \"video/webm\";\n            videoContainer.classList.remove(\"bg-video--desktop\");\n            videoElement.classList.remove(\"bg-video--desktop__content_desk\");\n            videoContainer.classList.add(\"bg-video--mobile\");\n            videoElement.classList.add(\"bg-video--mobile__content_mobile\");\n            if (oldParent) oldParent.insertBefore(videoContainer, oldParent.firstChild);\n            currentVideo = \"mobile\";\n        } else if (window.innerWidth > 767 && currentVideo !== \"desktop\") {\n            console.log(\"Selecting desktop video\");\n            videoElement.src = desktopVideoSrc;\n            videoElement.type = \"video/mp4\";\n            videoContainer.classList.remove(\"bg-video--mobile\");\n            videoElement.classList.remove(\"bg-video--mobile__content_mobile\");\n            videoContainer.classList.add(\"bg-video--desktop\");\n            videoElement.classList.add(\"bg-video--desktop__content_desk\");\n            if (newParent) newParent.insertBefore(videoContainer, newParent.firstChild);\n            currentVideo = \"desktop\";\n        }\n        videoElement.onloadeddata = videoLoadSuccess;\n        videoElement.onerror = videoLoadError;\n        loadAndPlayVideo(videoElement);\n    };\n    // Timeout to handle video load failure\n    setTimeout(()=>{\n        if (!videoLoaded) {\n            console.warn(\"Video load timeout reached\");\n            spinnerContainer.classList.add(\"hidden\");\n            videoContainer.style.display = \"none\";\n            imageContainer.style.display = \"block\";\n        }\n    }, 12000); // 12 seconds timeout\n    selectVideo();\n    // Listen for window resize events to change the video\n    window.addEventListener(\"resize\", selectVideo);\n    // Handle scroll changes for the navbar\n    const handleScroll = ()=>{\n        if (window.scrollY > scrollThreshold) {\n            navbar.classList.add(\"scrolled\");\n            navigationButton.classList.add(\"btn-darkin\");\n        } else {\n            navbar.classList.remove(\"scrolled\");\n            navigationButton.classList.remove(\"btn-darkin\");\n        }\n    };\n    const handleScrollOptimized = ()=>{\n        if (!scrolling) {\n            scrolling = true;\n            window.requestAnimationFrame(()=>{\n                handleScroll();\n                scrolling = false;\n            });\n        }\n    };\n    let scrolling = false;\n    // Throttle the scroll event listener\n    let isScrolling;\n    window.addEventListener(\"scroll\", ()=>{\n        window.clearTimeout(isScrolling);\n        isScrolling = setTimeout(()=>{\n            handleScrollOptimized();\n        }, 100);\n    });\n    // Create an IntersectionObserver for animations to avoid some errors \n    function animateElement(entries, observer) {\n        entries.forEach((entry)=>{\n            if (entry.isIntersecting) {\n                entry.target.classList.add(\"animate\");\n                observer.unobserve(entry.target); // Stop observing after adding the class\n            }\n        });\n    }\n    const observer = new IntersectionObserver(animateElement, {\n        threshold: 0.1\n    });\n    document.querySelectorAll(\".target\").forEach((e)=>{\n        observer.observe(e);\n    });\n    // Overlay for phone nav\n    const checkbox = document.getElementById(\"navi-toggle\");\n    const overlay = document.createElement(\"div\");\n    overlay.classList.add(\"overlay\");\n    checkbox.addEventListener(\"change\", ()=>{\n        if (checkbox.checked) {\n            document.body.appendChild(overlay);\n            setTimeout(()=>overlay.classList.add(\"show\"), 10);\n        } else {\n            overlay.classList.remove(\"show\");\n            overlay.addEventListener(\"transitionend\", ()=>{\n                if (!overlay.classList.contains(\"show\")) overlay.remove();\n            }, {\n                once: true\n            });\n        }\n    });\n    overlay.addEventListener(\"click\", ()=>{\n        checkbox.checked = false;\n        overlay.classList.remove(\"show\");\n        overlay.addEventListener(\"transitionend\", ()=>{\n            if (!overlay.classList.contains(\"show\")) overlay.remove();\n        }, {\n            once: true\n        });\n    });\n    // Intro animation\n    const timeline = gsap.timeline();\n    timeline.to(\".header\", {\n        duration: 2.5,\n        x: 0,\n        opacity: 1,\n        ease: \"power2.out\"\n    }, \"-=0.4\");\n    timeline.to(\".header__spans\", {\n        duration: 1,\n        x: 0,\n        opacity: 1,\n        ease: \"power2.out\"\n    }, \"-=0.4\");\n    timeline.to(\".header__title\", {\n        duration: 1.1,\n        x: 0,\n        opacity: 1,\n        ease: \"power2.out\"\n    }, \"-=0.4\");\n    timeline.to(\".header__buttons\", {\n        duration: 1.1,\n        x: 0,\n        opacity: 1,\n        ease: \"power2.out\"\n    }, \"-=0.4\");\n    timeline.to(\".header__paragraph\", {\n        duration: 1.2,\n        x: 0,\n        opacity: 1,\n        ease: \"power2.out\"\n    }, \"-=0.4\");\n});\n\n\n//# sourceMappingURL=index.e7f19c6f.js.map\n","document.addEventListener(\"DOMContentLoaded\", function () {\r\n    const spinnerContainer = document.getElementById('spinner-container');\r\n    const videoContainer = document.getElementById('video-container');\r\n    const imageContainer = document.getElementById('image-container');\r\n    const backgroundVideo = document.getElementById('background-video');\r\n    const navigationButton = document.querySelector('.navigation__button');\r\n    const navbar = document.getElementById(\"navbar\");\r\n    const newParent = document.getElementById('header_container');\r\n    const oldParent = document.getElementById('header');\r\n    const scrollThreshold = 100; // The scroll level to trigger the background change\r\n\r\n    let videoLoaded = false;\r\n    let currentVideo = '';\r\n\r\n    const mobileVideoSrc = 'mobile-Land-video.webm';\r\n    const desktopVideoSrc = 'video.mp4';\r\n\r\n    // Function to load and play the video with retries\r\n    const loadAndPlayVideo = (videoElement, retries = 3, delay = 2000) => {\r\n        const tryPlay = (attemptsLeft) => {\r\n            videoElement.load();\r\n            videoElement.play().then(() => {\r\n                videoLoadSuccess();\r\n            }).catch((e) => {\r\n                console.error('Autoplay prevented:', e);\r\n                if (attemptsLeft > 1) {\r\n                    console.log(`Retrying to play video. Attempts left: ${attemptsLeft - 1}`);\r\n                    setTimeout(() => tryPlay(attemptsLeft - 1), delay);\r\n                } else {\r\n                    videoLoadError(e);\r\n                }\r\n            });\r\n        };\r\n\r\n        tryPlay(retries);\r\n    };\r\n\r\n    // Video load success function\r\n    const videoLoadSuccess = () => {\r\n        videoLoaded = true;\r\n        spinnerContainer.classList.add('hidden');\r\n        videoContainer.style.display = 'block';\r\n        imageContainer.style.display = 'none';\r\n    };\r\n\r\n    // Video load error function\r\n    const videoLoadError = (e) => {\r\n        console.error('Video failed to load', e);\r\n        spinnerContainer.classList.add('hidden');\r\n        videoContainer.style.display = 'none';\r\n        imageContainer.style.display = 'block';\r\n    };\r\n\r\n    // Select and load the appropriate video based on screen size\r\n    const selectVideo = () => {\r\n        const videoElement = backgroundVideo;\r\n\r\n        if (window.innerWidth <= 767 && currentVideo !== 'mobile') {\r\n            console.log('Selecting mobile video');\r\n            videoElement.src = mobileVideoSrc;\r\n            videoElement.type = 'video/webm';\r\n            videoContainer.classList.remove('bg-video--desktop');\r\n            videoElement.classList.remove('bg-video--desktop__content_desk');\r\n            videoContainer.classList.add('bg-video--mobile');\r\n            videoElement.classList.add('bg-video--mobile__content_mobile');\r\n\r\n            if (oldParent) {\r\n                oldParent.insertBefore(videoContainer, oldParent.firstChild);\r\n            }\r\n\r\n            currentVideo = 'mobile';\r\n        } else if (window.innerWidth > 767 && currentVideo !== 'desktop') {\r\n            console.log('Selecting desktop video');\r\n            videoElement.src = desktopVideoSrc;\r\n            videoElement.type = 'video/mp4';\r\n            videoContainer.classList.remove('bg-video--mobile');\r\n            videoElement.classList.remove('bg-video--mobile__content_mobile');\r\n            videoContainer.classList.add('bg-video--desktop');\r\n            videoElement.classList.add('bg-video--desktop__content_desk');\r\n\r\n            if (newParent) {\r\n                newParent.insertBefore(videoContainer, newParent.firstChild);\r\n            }\r\n\r\n            currentVideo = 'desktop';\r\n        }\r\n\r\n        videoElement.onloadeddata = videoLoadSuccess;\r\n        videoElement.onerror = videoLoadError;\r\n\r\n        loadAndPlayVideo(videoElement);\r\n    };\r\n\r\n    // Timeout to handle video load failure\r\n    setTimeout(() => {\r\n        if (!videoLoaded) {\r\n            console.warn('Video load timeout reached');\r\n            spinnerContainer.classList.add('hidden');\r\n            videoContainer.style.display = 'none';\r\n            imageContainer.style.display = 'block';\r\n        }\r\n    }, 12000); // 12 seconds timeout\r\n\r\n    selectVideo();\r\n\r\n    // Listen for window resize events to change the video\r\n    window.addEventListener('resize', selectVideo);\r\n\r\n    // Handle scroll changes for the navbar\r\n    const handleScroll = () => {\r\n        if (window.scrollY > scrollThreshold) {\r\n            navbar.classList.add(\"scrolled\");\r\n            navigationButton.classList.add('btn-darkin');\r\n        } else {\r\n            navbar.classList.remove(\"scrolled\");\r\n            navigationButton.classList.remove('btn-darkin');\r\n        }\r\n    };\r\n\r\n    const handleScrollOptimized = () => {\r\n        if (!scrolling) {\r\n            scrolling = true;\r\n            window.requestAnimationFrame(() => {\r\n                handleScroll();\r\n                scrolling = false;\r\n            });\r\n        }\r\n    };\r\n\r\n    let scrolling = false;\r\n\r\n    // Throttle the scroll event listener\r\n    let isScrolling;\r\n    window.addEventListener(\"scroll\", () => {\r\n        window.clearTimeout(isScrolling);\r\n        isScrolling = setTimeout(() => {\r\n            handleScrollOptimized();\r\n        }, 100);\r\n    });\r\n\r\n    // Create an IntersectionObserver for animations to avoid some errors \r\n    function animateElement(entries, observer) {\r\n        entries.forEach((entry) => {\r\n            if (entry.isIntersecting) {\r\n                entry.target.classList.add(\"animate\");\r\n                observer.unobserve(entry.target); // Stop observing after adding the class\r\n            }\r\n        });\r\n    }\r\n\r\n    const observer = new IntersectionObserver(animateElement, {\r\n        threshold: 0.1, // Adjust as needed\r\n    });\r\n\r\n    document.querySelectorAll(\".target\").forEach((e) => {\r\n        observer.observe(e);\r\n    });\r\n\r\n    // Overlay for phone nav\r\n    const checkbox = document.getElementById('navi-toggle');\r\n    const overlay = document.createElement('div');\r\n    overlay.classList.add('overlay');\r\n\r\n    checkbox.addEventListener('change', () => {\r\n        if (checkbox.checked) {\r\n            document.body.appendChild(overlay);\r\n            setTimeout(() => overlay.classList.add('show'), 10);\r\n        } else {\r\n            overlay.classList.remove('show');\r\n            overlay.addEventListener('transitionend', () => {\r\n                if (!overlay.classList.contains('show')) {\r\n                    overlay.remove();\r\n                }\r\n            }, { once: true });\r\n        }\r\n    });\r\n\r\n    overlay.addEventListener('click', () => {\r\n        checkbox.checked = false;\r\n        overlay.classList.remove('show');\r\n        overlay.addEventListener('transitionend', () => {\r\n            if (!overlay.classList.contains('show')) {\r\n                overlay.remove();\r\n            }\r\n        }, { once: true });\r\n    });\r\n\r\n    // Intro animation\r\n    const timeline = gsap.timeline();\r\n    timeline.to(\".header\", {\r\n        duration: 2.5,\r\n        x: 0,\r\n        opacity: 1,\r\n        ease: \"power2.out\",\r\n    }, \"-=0.4\");\r\n\r\n    timeline.to(\".header__spans\", {\r\n        duration: 1,\r\n        x: 0,\r\n        opacity: 1,\r\n        ease: \"power2.out\",\r\n    }, \"-=0.4\");\r\n\r\n    timeline.to(\".header__title\", {\r\n        duration: 1.1,\r\n        x: 0,\r\n        opacity: 1,\r\n        ease: \"power2.out\",\r\n    }, \"-=0.4\");\r\n\r\n    timeline.to(\".header__buttons\", {\r\n        duration: 1.1,\r\n        x: 0,\r\n        opacity: 1,\r\n        ease: \"power2.out\",\r\n    }, \"-=0.4\");\r\n\r\n    timeline.to(\".header__paragraph\", {\r\n        duration: 1.2,\r\n        x: 0,\r\n        opacity: 1,\r\n        ease: \"power2.out\",\r\n    }, \"-=0.4\");\r\n});\r\n"],"names":["document","addEventListener","isScrolling","spinnerContainer","getElementById","videoContainer","imageContainer","backgroundVideo","navigationButton","querySelector","navbar","newParent","oldParent","videoLoaded","currentVideo","loadAndPlayVideo","videoElement","retries","delay","tryPlay","attemptsLeft","load","play","then","videoLoadSuccess","catch","e","console","error","log","setTimeout","videoLoadError","classList","add","style","display","selectVideo","window","innerWidth","src","type","remove","insertBefore","firstChild","onloadeddata","onerror","warn","handleScroll","scrollY","handleScrollOptimized","scrolling","requestAnimationFrame","clearTimeout","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","target","unobserve","threshold","querySelectorAll","observe","checkbox","overlay","createElement","checked","body","appendChild","contains","once","timeline","gsap","to","duration","x","opacity","ease"],"version":3,"file":"index.e7f19c6f.js.map"}